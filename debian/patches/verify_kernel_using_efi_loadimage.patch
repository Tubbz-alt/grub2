Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 grub2 (2.02+dfsg1+deepin4-4deepin1) eagle; urgency=medium
 .
   * Disable verify for arm64.
Author: Zhang Yueqian <zhangyueqian@deepin.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2019-12-23

--- grub2-2.02+dfsg1+deepin4.orig/grub-core/loader/arm64/linux.c
+++ grub2-2.02+dfsg1+deepin4/grub-core/loader/arm64/linux.c
@@ -372,6 +372,43 @@ grub_cmd_linux (grub_command_t cmd __att
       goto fail;
     }
 
+  // verify kernel by LoadImage() service provided by UEFI.
+  grub_efi_memory_mapped_device_path_t *sb_mempath;
+  grub_efi_handle_t sb_image_handle;
+  grub_efi_boot_services_t *sb_bs;
+  grub_efi_status_t sb_status;
+  grub_efi_loaded_image_t *sb_loaded_image;
+
+  sb_mempath = grub_malloc (2 * sizeof (grub_efi_memory_mapped_device_path_t));
+  if (!sb_mempath)
+    {
+      grub_error (GRUB_ERR_OUT_OF_MEMORY, N_("out of memory"));
+      goto fail;
+    }
+  sb_mempath[0].header.type = GRUB_EFI_HARDWARE_DEVICE_PATH_TYPE;
+  sb_mempath[0].header.subtype = GRUB_EFI_MEMORY_MAPPED_DEVICE_PATH_SUBTYPE;
+  sb_mempath[0].header.length = grub_cpu_to_le16_compile_time (sizeof (*mempath));
+  sb_mempath[0].memory_type = GRUB_EFI_LOADER_DATA;
+  sb_mempath[0].start_address = kernel_addr;
+  sb_mempath[0].end_address = kernel_addr + kernel_size;
+
+  sb_mempath[1].header.type = GRUB_EFI_END_DEVICE_PATH_TYPE;
+  sb_mempath[1].header.subtype = GRUB_EFI_END_ENTIRE_DEVICE_PATH_SUBTYPE;
+  sb_mempath[1].header.length = sizeof (grub_efi_device_path_t);
+
+  sb_bs = grub_efi_system_table->boot_services;
+  sb_status = sb_bs->load_image (0, grub_efi_image_handle,
+				 (grub_efi_device_path_t *) sb_mempath,
+				 (void *) kernel_addr, kernel_size, &sb_image_handle);
+  if (sb_status != GRUB_EFI_SUCCESS)
+    return grub_err (GRUB_ERR_BAD_OS, "Verify failed!");
+
+  grub_dprintf ("sbverify", "Verify success!\n");
+  sb_bs->unload_image (sb_image_handle);
+  grub_free (sb_mempath);
+
+  // END verify kernel.
+
   grub_dprintf ("linux", "kernel @ %p\n", kernel_addr);
 
   cmdline_size = grub_loader_cmdline_size (argc, argv) + sizeof (LINUX_IMAGE);
